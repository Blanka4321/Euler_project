public class CircularLinkedListChecker{
   
   public static void main(String[] args){
     
     Node circularList = createList(new int[] {1,2,3,4,3});
     Node nonCircularList = createList(new int[] {2,3,4,5,6,7});
     
     
   
   }
   
   public static Node createList(int[] list){
      
      Node head = null;
      Node iter = null;
      
      for(int i = 0; i < list.length; i++){
         
         Node node = new Node(list[i]);
         
         if(head == null){
            
             head = node;
             iter = node;
             continue;
         }
         
         iter.next = node;
         iter = node;
         
      }
      
      return head;
   
   }
   
   
   // this method stores all data values in the list in a HashMap. If the data that is to be added is already
   // present in the hashMap then we have a circular linkedList so we return true otherwise false
   public static boolean isCircular(Node head){
     
     boolean hasCircular = false;
     Node iter = head;
     HashMap<Integer, Integer> uniqueNumbers = new HashMap<>();
     
     while(iter != null){
        
        int key = iter.getData();
        
        if(uniqueNumbers.containsKey(key)){
           hasCircular = true;
           break;
        }
        
        uniqueNumbers.put(key,1);
        iter = iter.next;
        
     }
   
       return hasCircular;
   }
   
   
   // The node class that store the data 
   
   pulic static class Node{
     
      private int data;
      private Node next = null;
      
      public Node(int data){
        this.data = data;
      }
     
      public int getData(0{
       return data;
      } 
  }
   
   
}
